# -*- coding: utf-8 -*-
"""Submission2_Sistem_Rekomendasi_Amazon_Product.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WbnCtMNhJklAqh7OyWbh-vnl3BdsOJMr

# **Proyek Akhir Machine Learning Terapan**
## **Sistem Rekomendasi _Amazon Sales Product_ dengan Content-Bassed Filtering**
### Laily Khoirunnisa' - MLT4

##**1. Import library**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import zipfile, os
from google.colab import files

""" ## **2. Data Loading**"""

!pip install -q kaggle
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!ls ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d karkavelrajaj/amazon-sales-dataset

local_zip = 'amazon-sales-dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

df_amz = pd.read_csv("/tmp/amazon.csv")

"""## **3. Exploratory Data Analysis (EDA)**

**Mengamati Isi Dataset**
"""

df_amz.head()

"""**Jumlah data dan kolom variabel data**"""

df_amz.shape

"""**Cek datatype variabel data**"""

df_amz.info()

"""**Cek data inkonsisten**"""

df_amz["rating"].value_counts()

df_amz.query('rating == "|"')

df_amz['rating_count'].value_counts()

"""**Cek data kosong**"""

df_amz.isnull().sum()

"""## **4. Data Cleaning**"""

# Mengganti inconsisten data sekaligus mengubah data type sesuai dengan isi query
df_amz['rating'] = df_amz['rating'].astype(str).str.replace('|', '4.0').str.replace(',', '').astype(float)

#mengisi data rating_count yang kosong dengan mode()[0]
df_amz['rating_count'].fillna(df_amz['rating_count'].mode()[0], inplace=True)

#mengubah tipe data
df_amz['rating_count'] = df_amz['rating_count'].astype(str).str.replace(',', '').astype(float)

#mengubah kolom harga setelah diskon, harga dan presentasi diskon menjadi tipe numerik
df_amz['discounted_price'] = df_amz['discounted_price'].astype(str).str.replace('₹', '').str.replace(',', '').astype(float)
df_amz['actual_price'] = df_amz['actual_price'].astype(str).str.replace('₹', '').str.replace(',', '').astype(float)
df_amz['discount_percentage'] = df_amz['discount_percentage'].astype(str).str.replace('%','').astype(float)/100

df_amz.info()

#cek duplikat record
df_amz.duplicated().sum()

# menghilangkan spasi di product_id
df_amz['product_id'].str.strip()

"""**Melanjutkan analisa data numerik setelah data dibersihkan**"""

df_amz['actual_price'].describe()

df_amz['discounted_price'].describe()

df_amz['discount_percentage'].describe()

df_amz['rating'].describe()

df_amz['rating_count'].describe()

"""**Plot Diagram: Banyak Produk per Kategori**"""

most_items = df_amz['category'].value_counts().head(20).rename_axis('category').reset_index(name='counts')

fig, ax = plt.subplots(1,1,figsize=(8, 10))
fig.suptitle('Banyak Produk Berdasarkan Kategori', fontweight='heavy')

sns.barplot(ax=ax, data=most_items, x='counts', y='category')

plt.subplots_adjust(hspace = 0.2)
plt.gcf().set_size_inches(20,10)

ax.set_xlabel('Jumlah', fontweight='bold')
ax.set_ylabel('Produk Kategori', fontweight='bold')

ax.set_title('Produk Terbanyak', fontweight='bold')
ax.bar_label(ax.containers[0])

plt.show()

"""**Word Cloud pada variabel `Review` dan `Product Name`**"""

from wordcloud import WordCloud

# Analyze the reviews by creating word clouds or frequency tables of the most common words used in the reviews.
reviews_text = ' '.join(df_amz['review_content'].dropna().values)
wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(reviews_text)
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

# Analyze the reviews by creating word clouds or frequency tables of the most common words used in the product name.
reviews_text = ' '.join(df_amz['product_name'].dropna().values)
wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(reviews_text)
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

reviews_text = ' '.join(df_amz['about_product'].dropna().values)
wordcloud = WordCloud(width=800, height=800, background_color='white', min_font_size=10).generate(reviews_text)
plt.figure(figsize=(8, 8), facecolor=None)
plt.imshow(wordcloud)
plt.axis("off")
plt.tight_layout(pad=0)
plt.show()

numeric_cols = df_amz.select_dtypes(include=['float64'])
correlation_matrix = numeric_cols.corr()

# Print the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

"""**Inisialisasi Tokenizer**"""

from nltk.tokenize import RegexpTokenizer
import re

# Initialize tokenizer
tokenizer = RegexpTokenizer(r'\w+')

"""**Membuat Fungsi preprocess_text**"""

# text-preprocessing
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'\d+', '', text)  # Remove numbers
    tokens = tokenizer.tokenize(text)  # Tokenize text
    return ' '.join(tokens)

"""**Memecah kata kunci pada kolom `category`**"""

text_cleaning_category = df_amz['category'].str.replace( r"([A-Z])", r" \1").str.strip()
text_cleaning_category = df_amz['category'].str.replace('&', '')
text_cleaning_category = df_amz['category'].str.replace('|', '')
text_cleaning_category = df_amz['category'].str.replace(',', '')
text_cleaning_category

"""**Cek data kosong pada `about_product`**"""

df_amz['about_product'].isnull().sum()

"""**Mengaplikasikan preprocessing pada dataframe**"""

# Apply text preprocessing to 'product_name', 'categories', 'review_content', and 'about_product' columns
text_cleaning_about_product = df_amz['about_product'].apply(preprocess_text)
text_cleaning_product_name = df_amz['product_name'].apply(preprocess_text)
text_cleaning_review_content = df_amz['review_content'].apply(preprocess_text)
text_cleaning_category = df_amz['category'].apply(preprocess_text)

"""**Menggabungkan data hasil preprocessing**"""

df_amz['text'] = text_cleaning_about_product + ' ' + text_cleaning_product_name + ' ' + text_cleaning_review_content + ' ' + text_cleaning_category

df_amz['text'][0]

"""**Mengubah data text menjadi fitur numerik dengan TF-IDF**"""

from sklearn.feature_extraction.text import TfidfVectorizer
# Inisialisasi TfidfVectorizer
tfV = TfidfVectorizer(stop_words='english')

# Apply TF-IDF vectorization to 'text' column
tfidf_matrix = tfV.fit_transform(df_amz['text'])

"""#**Modelling Item Centred dengan Metode Content Based Filtering**
Mencari Rekomendasi berdasarkan kesamaan produk item
"""

from sklearn.metrics.pairwise import cosine_similarity
# Calculate cosine similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

def get_product_recommendations(product_id, num_recommendations=5):
    # Get the index of the product with the given ID
    index = df_amz[df_amz['product_id'] == product_id].index[0]

    # Get the pairwise similarity scores of the product
    sim_scores = list(enumerate(cosine_sim[index]))

    # Sort the products based on similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the top N similar products
    top_products = [df_amz.iloc[score[0]] for score in sim_scores[1:num_recommendations+2]]

    score = [sim_scores[i][1] for i in range(6)]
    top_df_temp = pd.DataFrame(top_products)
    top_df = pd.DataFrame()
    top_df['product_id']=top_df_temp['product_id']
    top_df['product_name']=top_df_temp['product_name']
    top_df['category']=top_df_temp['category']
    top_df['score']=score

    #remove 1st row
    top_df = top_df.tail(-1)

    return top_df

product_id = 'B07CRL2GY6'  # wayona USB to lightning
recommendations = get_product_recommendations(product_id)
recommendations
#print(recommendations)

product_id = 'B09YL9SN9B'  # TV LG 80 cm 32"
recommendations = get_product_recommendations(product_id)
recommendations

product_id = 'B00J5DYCCA'  # Havells exhaust fan for kitchen
recommendations = get_product_recommendations(product_id)
recommendations

"""#**Modelling User Centred dengan Metode Content Based Filtering**
####Rekomendasi item berdasarkan riwayat pembelian User
"""

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df_amz['user_id_encoded'] = le.fit_transform(df_amz['user_id'])

from sklearn.preprocessing import LabelEncoder

# membuat dataframe user_id frequency table
freq_table = pd.DataFrame({'User ID': df_amz['user_id_encoded'].value_counts().index, 'Frequency': df_amz['user_id_encoded'].value_counts().values})

# Display the dataframe
print(freq_table)
id_example = freq_table.iloc[0,0]
print(id_example)

def recommend_products_as_user(df, user_id_encoded):
    # Get the purchase history for the user
    user_history = df[df['user_id_encoded'] == user_id_encoded]

    # only for the products that the user has already purchased
    indices = user_history.index.tolist()

    if indices:
        # Create a new similarity matrix with only the rows and columns for the purchased products
        cosine_sim_user = cosine_similarity(tfidf_matrix[indices], tfidf_matrix)

        # Create a pandas Series with product indices as the index and product names as the values
        products = df.iloc[indices]['product_name']
        indices = pd.Series(products.index, index=products)

        # Get the indices and similarity scores of products similar to the ones the user has already purchased
        similarity_scores = list(enumerate(cosine_sim_user[-1]))
        similarity_scores = [(i, score) for (i, score) in similarity_scores if i not in indices]

        # Sort the similarity scores in descending order
        similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

        # Get the indices of the top 5 most similar products
        top_products = [i[0] for i in similarity_scores[1:7]]

        # Get the names of the top 5 most similar products
        recommended_products = df.iloc[top_products]['product_name'].tolist()

        # Get the reasons for the recommendation
        score = [similarity_scores[i][1] for i in range(6)]

        # Create a DataFrame with the results
        results_df = pd.DataFrame({'Id Encoded': [user_id_encoded] * 6,
                                   'recommended product': recommended_products,
                                   'score recommendation': score})

        #remove 1st similar=1
        results_df = results_df.tail(-1)

        return results_df

    else:
        print("No purchase history found.")
        return None

recommend_products_as_user(df_amz, 5)

recommend_products_as_user(df_amz, 11)

recommend_products_as_user(df_amz, 337)

df_amz.loc[df_amz['user_id_encoded'] == 11]